"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var fs_1 = require("fs");
var callbackMkdirp = require("mkdirp");
var NodeRSA = require("node-rsa");
var path_1 = require("path");
var turbocolor_1 = require("turbocolor");
var util_1 = require("util");
var gitignore_1 = require("./config/gitignore");
var constants_1 = require("./constants");
var mkdirp = util_1.promisify(callbackMkdirp);
var readFile = util_1.promisify(fs.readFile);
var writeFile = util_1.promisify(fs.writeFile);
/**
 * Reads or constructs the key and saves it in the project.
 */
function readOrConstructKey() {
    return __awaiter(this, void 0, void 0, function () {
        var keyContent, keyContent, key;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(process.env.GIT_SECRET_KEY != null)) return [3 /*break*/, 1];
                    // Support for setting the key as env variable
                    console.log("Reading private key from " + turbocolor_1.magenta("process.env.GIT_SECRET_KEY"));
                    keyContent = process.env.GIT_SECRET_KEY;
                    return [2 /*return*/, new NodeRSA(keyContent.toString(), "private")];
                case 1:
                    if (!fs_1.existsSync(constants_1.PRIVATE_KEY_PATH)) return [3 /*break*/, 3];
                    // Read the private key
                    console.log("Reading private key " + turbocolor_1.magenta(constants_1.PRIVATE_KEY_PATH));
                    return [4 /*yield*/, readFile(constants_1.PRIVATE_KEY_PATH)];
                case 2:
                    keyContent = _a.sent();
                    return [2 /*return*/, new NodeRSA(keyContent.toString(), "private")];
                case 3:
                    // Construct the private key
                    console.log("Creating private key " + turbocolor_1.magenta(constants_1.PRIVATE_KEY_PATH));
                    key = new NodeRSA({ b: constants_1.KEY_SIZE });
                    writeFile(constants_1.PRIVATE_KEY_PATH, key.exportKey("private"));
                    // Add the key path to .gitignore
                    return [4 /*yield*/, gitignore_1.addMissingEntriesToGitignore([constants_1.PRIVATE_KEY_PATH])];
                case 4:
                    // Add the key path to .gitignore
                    _a.sent();
                    return [2 /*return*/, key];
            }
        });
    });
}
exports.readOrConstructKey = readOrConstructKey;
/**
 * Decrypts a file using a specific key.
 * @param path
 * @param key
 */
function decryptFile(path, key) {
    return __awaiter(this, void 0, void 0, function () {
        var encryptedPath, encryptedContent, content;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    encryptedPath = constants_1.SECRET_DIRECTORY + "/" + path;
                    console.log("Decrypting: %s => %s", turbocolor_1.magenta(encryptedPath), turbocolor_1.cyan(path));
                    if (!fs_1.existsSync(encryptedPath)) return [3 /*break*/, 3];
                    return [4 /*yield*/, readFile(encryptedPath)];
                case 1:
                    encryptedContent = _a.sent();
                    content = key.decrypt(encryptedContent.toString(), "utf8");
                    // Saves the file in the target path
                    return [4 /*yield*/, writeFile(path, content)];
                case 2:
                    // Saves the file in the target path
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    console.log(turbocolor_1.red("Error: the file") + " " + turbocolor_1.cyan(encryptedPath) + " " + turbocolor_1.red("doesn't exist"));
                    _a.label = 4;
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.decryptFile = decryptFile;
/**
 * Encrypts a file using a specific key.
 * @param path
 * @param key
 */
function encryptFile(path, key) {
    return __awaiter(this, void 0, void 0, function () {
        var encryptedPath, content, encryptedContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    encryptedPath = constants_1.SECRET_DIRECTORY + "/" + path;
                    console.log("Encrypting: %s => %s", turbocolor_1.cyan(path), turbocolor_1.magenta(encryptedPath));
                    if (!fs_1.existsSync(path)) return [3 /*break*/, 4];
                    return [4 /*yield*/, readFile(path)];
                case 1:
                    content = _a.sent();
                    encryptedContent = key.encrypt(content, "base64", "utf8");
                    // Make sure that the destination path exists and save it.
                    return [4 /*yield*/, mkdirp(path_1.dirname(encryptedPath))];
                case 2:
                    // Make sure that the destination path exists and save it.
                    _a.sent();
                    return [4 /*yield*/, writeFile(encryptedPath, encryptedContent)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 5];
                case 4:
                    console.log(turbocolor_1.red("Error: the file") + " " + turbocolor_1.cyan(path) + " " + turbocolor_1.red("doesn't exist"));
                    _a.label = 5;
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.encryptFile = encryptFile;
/**
 * Encrypts many files using a specific key.
 * @param paths
 * @param key
 */
function encryptFiles(paths, key) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        paths.forEach(function (path) { return encryptFile(path, key); })
                    ])];
                case 1:
                    _a.sent();
                    // Make sure that content in this directory isn't ignored no matter what
                    return [4 /*yield*/, gitignore_1.addMissingEntriesToGitignore(["!/.git-secret/**"])];
                case 2:
                    // Make sure that content in this directory isn't ignored no matter what
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.encryptFiles = encryptFiles;
/**
 * Decrypts many files using a specific key.
 * @param paths
 * @param key
 */
function decryptFiles(paths, key) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, Promise.all([
                        paths.forEach(function (path) { return decryptFile(path, key); })
                    ])];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.decryptFiles = decryptFiles;
