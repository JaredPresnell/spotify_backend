"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var fs_1 = require("fs");
var gitignore_parser_1 = require("gitignore-parser");
var turbocolor_1 = require("turbocolor");
var util_1 = require("util");
var constants_1 = require("../constants");
var readFile = util_1.promisify(fs.readFile);
var appendFile = util_1.promisify(fs.appendFile);
/**
 * Returns a list of CLI-specific entries from the gitignore file.
 * @param gitignoreGlobs
 */
function getSecretGlobsFromGitignoreGlobs(gitignoreGlobs) {
    var secretGlobs = [];
    var addNextGlob = false;
    for (var i = 0; i < gitignoreGlobs.length - 1; i++) {
        var glob = gitignoreGlobs[i];
        // We are in "add mode"
        if (addNextGlob) {
            var isComment = glob.match(constants_1.GITIGNORE_COMMENT_REGEX);
            // If this line isn't a comment, add it! Else wait until next entry and test again.
            if (!isComment) {
                secretGlobs.push(glob);
                addNextGlob = false;
            }
        }
        else {
            // If we see a valid comment regex we want to add the next non-comment entry to "globs".
            // Set "addNextGlob" to true if it matches the comment regex.
            addNextGlob = glob.match(constants_1.ACTIVE_GITIGNORE_COMMENT_REGEX) != null;
        }
    }
    return secretGlobs;
}
/**
 * Reads all lines from gitignore.
 */
function readLinesFromGitignore() {
    return __awaiter(this, void 0, void 0, function () {
        var gitignoreContent;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, readFile(constants_1.GITIGNORE_PATH, "utf8")];
                case 1:
                    gitignoreContent = _a.sent();
                    return [2 /*return*/, gitignoreContent.split(constants_1.GITIGNORE_LINE_END_REGEX)];
            }
        });
    });
}
/**
 * Returns a list of entries in gitignore.
 * This function both returns cli-related entries and non-cli-related entries.
 * @param gitignoreLines
 */
function getGlobsFromGitignore(gitignoreLines) {
    var secretGlobs = getSecretGlobsFromGitignoreGlobs(gitignoreLines);
    var otherGlobs = gitignoreLines.filter(function (glob) { return !secretGlobs.includes(glob); });
    return {
        secretGlobs: secretGlobs,
        otherGlobs: otherGlobs
    };
}
/**
 * Add missing entries to the gitignore file.
 * This function matches directly on the entry string.
 * @param entries
 */
function addMissingEntriesToGitignore(entries) {
    return __awaiter(this, void 0, void 0, function () {
        var gitignoreLines, _i, _a, entry;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, readLinesFromGitignore()];
                case 1:
                    gitignoreLines = _b.sent();
                    _i = 0, _a = entries.filter(function (entry) { return !gitignoreLines.includes(entry); });
                    _b.label = 2;
                case 2:
                    if (!(_i < _a.length)) return [3 /*break*/, 5];
                    entry = _a[_i];
                    console.log("Adding " + turbocolor_1.magenta(entry) + " to " + turbocolor_1.magenta(constants_1.GITIGNORE_PATH));
                    return [4 /*yield*/, appendFile(constants_1.GITIGNORE_PATH, "\n" + entry)];
                case 3:
                    _b.sent();
                    _b.label = 4;
                case 4:
                    _i++;
                    return [3 /*break*/, 2];
                case 5: return [2 /*return*/];
            }
        });
    });
}
exports.addMissingEntriesToGitignore = addMissingEntriesToGitignore;
/**
 * Validates that .gitignore contains entries needed by this CLI.
 */
function validateGitignorePaths() {
    return __awaiter(this, void 0, void 0, function () {
        var gitignoreTester, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = gitignore_parser_1.compile;
                    return [4 /*yield*/, readFile(constants_1.GITIGNORE_PATH, "utf8")];
                case 1:
                    gitignoreTester = _a.apply(void 0, [_b.sent()]);
                    if (fs_1.existsSync(constants_1.PRIVATE_KEY_PATH) && gitignoreTester.accepts(constants_1.PRIVATE_KEY_PATH)) {
                        console.log("" + turbocolor_1.red("Please add ") + turbocolor_1.magenta(constants_1.PRIVATE_KEY_PATH) + turbocolor_1.red(" to .gitignore!"));
                    }
                    if (fs_1.existsSync(constants_1.SECRET_DIRECTORY) && gitignoreTester.denies(constants_1.SECRET_DIRECTORY)) {
                        console.log("" + turbocolor_1.red(".gitignore is ignoring the directory ") + turbocolor_1.magenta(constants_1.SECRET_DIRECTORY) + turbocolor_1.red("!"));
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.validateGitignorePaths = validateGitignorePaths;
/**
 * Returns a list of paths to encrypt/decrypt.
 */
function getSecretPathsFromGitignore() {
    return __awaiter(this, void 0, void 0, function () {
        var gitignoreLines, _a, secretPaths, otherGlobs;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, readLinesFromGitignore()];
                case 1:
                    gitignoreLines = _b.sent();
                    _a = getGlobsFromGitignore(gitignoreLines), secretPaths = _a.secretGlobs, otherGlobs = _a.otherGlobs;
                    return [2 /*return*/, secretPaths];
            }
        });
    });
}
exports.getSecretPathsFromGitignore = getSecretPathsFromGitignore;
